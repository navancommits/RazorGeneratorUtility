using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace RazorGeneratorUtility
{
    class Program
    {
        static string slnParentPath = string.Empty;
        static string slnName = string.Empty;
        static string slnPath = string.Empty;
        static string grandParentPath = string.Empty;
        static readonly string customConfigFileName = "RazorGeneratorUtility.Custom.Config";
        static readonly string namespaceName = "using System.Web.Optimization;";
        static int option = 0;

        static string sitesConfigLocation = string.Empty;
        static List<String> projectList = new List<string>();
        static void Main(string[] args)
        {
            var path = args[1];
            var optionval = args[0];
            var grandparpath =args[2];
            
            slnParentPath = Path.GetDirectoryName(path);
            slnName= Path.GetFileName(path);
            grandParentPath = grandparpath;
            option = Convert.ToInt16(optionval);
            
            slnPath = slnParentPath + @"\" + slnName;//@"C:\Projects\xyz\zyy-main-site-9.2\zxczx.MainSite\zxzz.Mainsite.sln";

            switch (option)
            {
                case 1:
                    AddRazorGeneratorDirectivetoCshtml();
                    break;
                case 2:
                    MigrateFromRazorMvctoRazorMsBuild();
                    break;
                case 3:
                    FindGeneratedCSReferences();
                    break;
                case 4:
                    FindAutoGeneratedFilesinFS();
                    break;
                case 5:
                    ListBuildActionforCshtmlFiles();
                    break;
                case 6:
                    SetBuildActionforCshtmlFiles();
                    break;
                case 7:
                    ConvertCshtmlProjectstoCompiledViews();
                    break;
                case 8:
                    RemoveUnusedNamespaceReferences();
                    break;
                case 9:
                    ConvertLineEnding();
                    break;
                default:
                    break;
            }

            Console.WriteLine("Operation success!!!");
            Console.ReadLine();
        }

        private static void MigrateFromRazorMvctoRazorMsBuild()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);

                //process to remove razor mvc generated cs and add msbuild ref starts here                
                BlankRazorGeneratedLines(Projects[i]);// revert .generated.cs changes
                ReplaceGeneratedLinesStartingwithNone(Projects[i],"None");// undo generated.cs back to cshtml
                BlankRazorGeneratorMvcStartLines(Projects[i]);
                BlankRazorMvcReferenceandAddRazorBuildRef(Projects[i]);//step 4 remove razor mvc pkg ref and add razor msbuild ref
            }
            AddRazorMsBuildtoPackagesConfig();
            DeleteAutoGeneratedFiles();// delete autogenerated files from filesystem
            DeleteRazorMvcStartFiles(); //delete rzor generator mvc start files from filesystem
        }

        private static void RemoveUnusedNamespaceReferences()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);

                //process to remove ns name ref               
                BlankNamespaceReferences(Projects[i], namespaceName);                 
            }
            
        }

        private static void ConvertCshtmlProjectstoCompiledViews()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();

            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                if (AnyCshtmlFilesinProject(Projects[i]))
                {
                    UpdateCshtmlFileswithBuildActionNone(Projects[i], "None");
                    AddRazorBuildReferenceinPackageConfig(Path.GetDirectoryName(Projects[i]) + "\\packages.config");
                    AddRazorBuildRef(Projects[i]);
                    GetSitesConfigLocation(Path.GetDirectoryName(Projects[i]));
                    AddProjectstoList(Projects[i]);
                }

           }
            WriteRazorGenConfig(ConcatenatedAssemblyList());
        }

        private static void ConvertLineEnding()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();

            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                if (AnyCshtmlFilesinProject(Projects[i]))
                {
                    AddLineEndingforPackagesConfig(Path.GetDirectoryName(Projects[i]));
                }

            }
        }

        private static void AddLineEndingforPackagesConfig(string path)
        {
            string[] configs = Directory.GetFiles(path, "packages.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(path),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);
                AddLineEnding(configs[i]);

            }
        }

        private static void AddLineEnding(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    
                    concatLines += currline + Environment.NewLine;

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }
            Console.WriteLine("Updating Packages.config " + filePath);
        }

        private static  void GetSitesConfigLocation(string folderPath)
        {
            string[] configs = Directory.GetFiles(folderPath, "*.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(folderPath),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);
                if (string.IsNullOrWhiteSpace(sitesConfigLocation))
                {
                    if (!string.IsNullOrWhiteSpace(SitesConfigurationFound(configs[i])))
                    {
                        sitesConfigLocation = SitesConfigurationFound(configs[i]);
                        Console.WriteLine("Sites Config Location : " + sitesConfigLocation);
                        break;
                    }
                }
            }
        }
        private static  void WriteRazorGenConfig(string concatLines)
        {
            if (!string.IsNullOrWhiteSpace(sitesConfigLocation))
            {
                if (!File.Exists(Path.GetDirectoryName(sitesConfigLocation) + @"\" + customConfigFileName))
                {
                    using (FileStream fs = File.Create(Path.GetDirectoryName(sitesConfigLocation) + @"\" + customConfigFileName))
                    {
                        byte[] info = new UTF8Encoding(true).GetBytes(concatLines);
                        fs.Write(info, 0, info.Length);
                    }
                }
            }

            Console.WriteLine("Successful write to " + sitesConfigLocation + @"\" + customConfigFileName);
        }

        private static string ConcatenatedAssemblyList()
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            var openingLines = "<configuration xmlns:patch=\"http://www.sitecore.net/xmlconfig/\" xmlns:role=\"http://www.sitecore.net/xmlconfig/role/\" >\r  <sitecore>\r\t<settings>\r\t\t\t<setting name=\"Mvc.UsePhysicalViewsIfNewer\" value=\"true\" />\r\t</settings>\r";
            var endingLines = "\r  </sitecore>\r</configuration>";
            var projListStartString = "\t<mvc>\r\t\t    <precompilation>\r\t\t\t      <assemblies>\r ";
            var projListEndString = "\r\t\t\t      </assemblies>\r\t\t    </precompilation>\r\t</mvc> ";
            var projectListString = string.Empty;

            foreach (var project in projectList)
            {
               
                projectListString += "\r\t\t\t\t        <assemblyIdentity name=\"" + project + "\" />";
            }
            var concatLines = openingLines + projListStartString + projectListString + projListEndString + endingLines;

            return concatLines;
        }

        private static bool CreateRazorGenConfig(string folderPath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool found = false;
            var configFileName = "RazorGen.Sitecore.config";
            var openingLines = "<configuration xmlns:patch=\"http://www.sitecore.net/xmlconfig/\" xmlns:role=\"http://www.sitecore.net/xmlconfig/role/\" >\r  <sitecore>\r\t<settings>\r\t\t\t<setting name=\"Mvc.UsePhysicalViewsIfNewer\" value=\"true\" />\r\t</settings>\r";
            var endingLines = "\r  </sitecore>\r</configuration>";
            var projListStartString = "\t<mvc>\r\t\t    <precompilation>\r\t\t\t      <assemblies>\r ";
            var projListEndString = "\t\t\t      </assemblies>\r\t\t    </precompilation>\r\t</mvc> ";
            var projectListString = string.Empty;

            foreach (var project in projectList)
            {
                
                projectListString += "\r        <assemblyIdentity name=\"" + project + "\" />";
            }
            var concatLines = openingLines + projListStartString + projectListString  + projListEndString + endingLines;


            string[] configs = Directory.GetFiles(folderPath, "*.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(folderPath),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);

                //
                var configFilePath = SitesConfigurationFound(configs[i]);
                if (!string.IsNullOrWhiteSpace(configFilePath))
                {
                    
                    if (!File.Exists(Path.GetDirectoryName(folderPath) + @"\" + configFileName)) {
                        using (FileStream fs = File.Create(folderPath + @"\" + configFileName))
                        {
                            byte[] info = new UTF8Encoding(true).GetBytes(concatLines);
                            fs.Write(info, 0, info.Length);
                        }
                    }

                }

                //

            }

            return found;
        }

        private static string SitesConfigurationFound(string filePath)
        {
            
            var configFilePath = string.Empty;
            if (!filePath.Contains("App_Config\\Include"))  return configFilePath; 

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                while (null != (currline = input.ReadLine()))
                {
                    // modify line.
                    if (currline.Contains("<sites>"))
                    {
                        configFilePath = filePath;
                        break;
                    }
                }

            }
            return configFilePath;
        }

        private static void AddProjectstoList(string projectPath)
        {
            var lastSlashPos=projectPath.LastIndexOf("\\");
            var endofProjName = projectPath.IndexOf(".csproj");
            var dllStringLength = endofProjName - lastSlashPos;
            var dllName = projectPath.Substring(lastSlashPos + 1, dllStringLength-1);

            projectList.Add(dllName);
        }

        private static void AddRazorGeneratorDirectivetoCshtml()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                AddRazorGeneratortoCshtmlProp(Projects[i]);//for adding razorgenerator.mvc

            }
        }

        private static void DeleteAutoGeneratedFiles()
       {
            string[] files = Directory.GetFiles(grandParentPath, "*.generated.cs", SearchOption.AllDirectories);

            // delete all the files.
            foreach (string file in files)
            {
                File.Delete(file);
            }

            Console.WriteLine("Deleted all .generated.cs files from filesystem");
        }

        private static bool FindAutoGeneratedFilesinFS()
        {            
            string[] files = Directory.GetFiles(grandParentPath, "*.generated.cs", SearchOption.AllDirectories);
            bool found = false;

            // find all the files.
            foreach (string file in files)
            {
                Console.WriteLine(file);
                found = true;
            }

            if (!found) Console.WriteLine("None Found!!!!");

            return found;
        }

        private static void DeleteRazorMvcStartFiles()
        {
            string[] files = Directory.GetFiles(grandParentPath, "RazorGeneratorMvcStart.cs", SearchOption.AllDirectories);

            // delete all the files.
            foreach (string file in files)
            {
                File.Delete(file);
            }

            Console.WriteLine("Deleted all RazorGeneratorMvcStart.cs files from filesystem");
        }

        
        private static string GetSubString(string stringVal, string string1,string string2)
        {

            int pFrom = stringVal.IndexOf(string1) + string1.Length;
            int pTo = stringVal.LastIndexOf(string2);

            return stringVal.Substring(pFrom, pTo - pFrom);
        }

        private static void AddRazorGeneratortoCshtmlProp(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            int lastIndexofSlash;
            int indexofCshtml;
            int fileStringLength;
            bool fileChanged;
            string concatLines=string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    // modify line.
                    if (currline.Contains("Content") && currline.Contains("Include=")  && currline.Contains(".cshtml"))
                    {
                        cshtmlPath = GetSubString(currline, "\"", "\"");
                        
                        lastIndexofSlash= cshtmlPath.LastIndexOf(@"\");
                        indexofCshtml = cshtmlPath.IndexOf(@".");
                        fileStringLength = indexofCshtml - lastIndexofSlash;

                        newline = "\r\t<None Include = \"" + cshtmlPath + "\">\r\t\t<Generator>RazorGenerator</Generator>\r\t\t<LastGenOutput>" + cshtmlPath.Substring(lastIndexofSlash + 1, fileStringLength) + "generated.cs</LastGenOutput>\r\t</None>\r";

                        fileChanged = true;
                        concatLines += newline;
                        
                    }
                    else
                    {
                        concatLines += currline + "\r";
                    }
                }
               
            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);
                    
                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }


        }

        private static void ListBuildActionforCshtmlFiles()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                ListAnyCshtmlFileswithBuildActionNotNone(Projects[i],"None");

            }

        }

        private static void SetBuildActionforCshtmlFiles()
        {
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                UpdateCshtmlFileswithBuildActionNone(Projects[i],"None");

            }

        }

        private static void UpdateCshtmlFileswithBuildActionNone(string filePath,string buildAction)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;
            int lastIndexofSlash;
            int indexofCshtml;
            int fileStringLength;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                        //  modify line.
                        if (currline.Contains("Include=") && currline.Contains(".cshtml"))
                        {
                            if (!currline.Contains(buildAction))
                            {
                                cshtmlPath = GetSubString(currline, "\"", "\"");
                                Console.WriteLine("Modifying line: " + currline + " in " + filePath);

                                lastIndexofSlash = cshtmlPath.LastIndexOf(@"\");
                                indexofCshtml = cshtmlPath.IndexOf(@".");
                                fileStringLength = indexofCshtml - lastIndexofSlash;

                                newline = "    <" + buildAction + " Include=\"" + cshtmlPath + "\" />" + Environment.NewLine;
                                Console.WriteLine("Updated Build Action to None for " + cshtmlPath);

                                concatLines += newline;
                                fileChanged = true;
                            }
                            else
                            {
                                concatLines += currline + Environment.NewLine;
                            }

                        }
                        else
                        {
                            concatLines += currline + Environment.NewLine;
                        }

                }
            
            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

        }

        private static bool ListAnyCshtmlFileswithBuildActionNotNone(string filePath,string buildAction)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool found = false;

            using (var input = File.OpenText(filePath))
            {
                string currline;
                while (null != (currline = input.ReadLine()))
                {
                    // modify line.
                    if (!currline.Contains(buildAction) && currline.Contains("Include=") && currline.Contains(".cshtml"))
                    {
                        Console.WriteLine(filePath + " : " + currline);
                        found = true;
                    }
                }

            }

            return found;
        }

        private static bool AnyCshtmlFilesinProject(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool found = false;

            using (var input = File.OpenText(filePath))
            {
                string currline;
                while (null != (currline = input.ReadLine()))
                {
                    // modify line.
                    if (currline.Contains("Include=") && currline.Contains(".cshtml"))
                    {
                        found = true;
                        break;
                    }
                }

            }

            return found;
        }

        private static void FindGeneratedCSReferences()
        {
            
            var Content = File.ReadAllText(slnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(slnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                FindAnyGeneratedCsReferences(Projects[i]);//find refs

            }
        }

        private static void FindAnyGeneratedCsReferences(string filePath)
        {

            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            string concatLines = string.Empty;
            bool found = false;

            using (var input = File.OpenText(filePath))
            { 
                string currline;
                while (null != (currline = input.ReadLine()))
                {
                    if (currline.Contains(".generated.cs"))
                    {
                        Console.WriteLine(filePath + " : " + currline + "\r");
                        found = true;
                    }
                   
                }

            }

            if(!found) Console.WriteLine("No .generated.cs files referenced in the sln!!!");
            Console.WriteLine("Search Completed!!!");
            Console.ReadLine();
        }

        private static void ReplaceGeneratedLinesStartingwithNone(string filePath,string buildAction)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged=false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        //  modify line.
                        if (currline.Contains(buildAction) && currline.Contains("Include=") && currline.Contains(".cshtml"))
                        {
                            newline = currline + "</" + buildAction + ">\r";
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</" + buildAction + ">"))
                        {
                            lineChanged = false;
                            fileChanged = true;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Updated cshtml entries in project file to build action none - " + filePath);
        }

        private static void BlankRazorGeneratedLines(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        //  modify line.
                        if (currline.Contains("Compile") && currline.Contains("Include=") && currline.Contains(".generated.cs"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</Compile>"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed .generated.cs entries in project file - " + filePath);
        }

        private static void BlankNamespaceReferences(string filePath,string namespaceName)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                        //  modify line.
                        if (currline.Contains(namespaceName))
                        {
                            newline += string.Empty;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            concatLines += currline + "\r";
                        }
                   

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed namespace reference in project file - " + filePath);
        }


        private static void BlankRazorGeneratorMvcStartLines(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    
                        // optionally modify line.
                        if (currline.Contains("Compile") && currline.Contains("Include=") && currline.Contains("App_Start\\RazorGeneratorMvcStart.cs"))
                        {
                            newline += string.Empty;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            concatLines += currline + "\r";
                        }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed RazorGeneratorMvcStart.cs reference in project file " + filePath);
        }

        private static void BlankRazorMvcReferenceandAddRazorBuildRef(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;
            bool tracktarget = false;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        //  modify line.
                        if (currline.Contains("Reference") && currline.Contains("Include=") && currline.Contains("RazorGenerator.Mvc"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;
                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            if (!tracktarget)
                            {
                                if (currline.Contains("<Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">"))
                                {
                                    tracktarget = true;
                                }
                                concatLines += currline;
                            }
                            else
                            {
                                if (currline.Contains("</Target>"))
                                {
                                    tracktarget = false;
                                    newline = "\r\t<Error Condition=\"!Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets'))\" />\r\t</Target>\r\t<Import Project=\"..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets\" Condition=\"Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" />";
                                    fileChanged = true;
                                }
                                else
                                {
                                    newline = currline;
                                }
                                concatLines += newline;
                            }

                        }
                    }
                    else
                    {
                        if (currline.Contains("</Reference>"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed RazorGenerator.Mvc Dll ref and added RazorGenerator.msbuild pkg ref in proj file " + filePath);
        }

        private static void AddRazorBuildRef(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;
            bool tracktarget = false;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                       
                            if (!tracktarget)
                            {
                                if (currline.Contains("<Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">"))
                                {
                                    tracktarget = true;
                                }
                                concatLines += currline + Environment.NewLine;
                            }
                            else
                            {
                                if (currline.Contains("</Target>"))
                                {
                                    tracktarget = false;
                                    newline = "    <Error Condition=\"!Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets'))\" />" + Environment.NewLine + "  </Target>" + Environment.NewLine + "  <Import Project=\"..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets\" Condition=\"Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" />";
                                    Console.WriteLine("Added RazorGenerator.MSBuild ref to " + filePath);
                                    fileChanged = true;
                                }
                                else
                                {
                                    newline = currline;
                                }
                                concatLines += newline + Environment.NewLine;
                            }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }
        }

        private static void AddRazorMsBuildtoPackagesConfig()
        {
            string[] configs = Directory.GetFiles(grandParentPath, "packages.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(grandParentPath),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);
                RemoveRazorGeneratorMvcRefandAddRazorBuildRefinPackageJson(configs[i]);

            }
        }

        private static void RemoveRazorGeneratorMvcRefandAddRazorBuildRefinPackageJson(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;



            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    // optionally modify line.
                    if (currline.Contains("<package id=\"RazorGenerator.Mvc\""))
                    {
                        newline = "  <package id=\"RazorGenerator.MsBuild\" version=\"2.5.0\" targetFramework=\"net472\" developmentDependency=\"true\" />\r";
                        fileChanged = true;
                        concatLines += newline;
                    }
                    else
                    {
                        concatLines += currline + "\r";

                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }
            Console.WriteLine("Updating Packages.config " + filePath);
        }

        private static void AddRazorMsBuildPkgtoPackagesConfig()
        {
            string[] configs = Directory.GetFiles(grandParentPath, "packages.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(grandParentPath),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);
                AddRazorBuildReferenceinPackageConfig(configs[i]);

            }
        }


        private static void AddRazorBuildReferenceinPackageConfig(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                while (null != (currline = input.ReadLine()))
                {
                    if (currline.Contains("</packages>"))
                    {
                        currline =  "  <package id=\"RazorGenerator.MsBuild\" version=\"2.5.0\" targetFramework=\"net472\" developmentDependency=\"true\" />" + Environment.NewLine + currline;

                    }
                    concatLines += currline + Environment.NewLine;
                }

            }

            File.WriteAllText(@"temp1.csproj", concatLines);

            File.Replace("temp1.csproj", filePath, null);
            File.Delete("temp1.csproj");

            Console.WriteLine("Updating Packages.config " + filePath);
        }


        private static void BlankRazorGeneratedNoneLines(string filePath,string buildAction)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        // optionally modify line.
                        if (currline.Contains(buildAction) && currline.Contains("Include=") && currline.Contains(".generated.cs"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</" + buildAction + ">"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }


        }
    }
}
