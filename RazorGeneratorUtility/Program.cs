using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace RazorGeneratorUtility
{
    class Program
    {
        static string slnParentPath = string.Empty;
        static string slnName = string.Empty;
        static void Main(string[] args)
        {
            slnParentPath = args[0];
            slnName= args[1];
            var SlnPath = args[0] + args[1];//@"C:\Projects\xyz\zyy-main-site-9.2\zxczx.MainSite\zxzz.Mainsite.sln";
            var Content = File.ReadAllText(SlnPath);
            Regex projReg = new Regex(
                "Project\\(\"\\{[\\w-]*\\}\"\\) = \"([\\w _]*.*)\", \"(.*\\.(cs|vcx|vb)proj)\""
                , RegexOptions.Compiled);
            var matches = projReg.Matches(Content).Cast<Match>();
            var Projects = matches.Select(x => x.Groups[2].Value).ToList();
            for (int i = 0; i < Projects.Count; ++i)
            {
                if (!Path.IsPathRooted(Projects[i]))
                    Projects[i] = Path.Combine(Path.GetDirectoryName(SlnPath),
                        Projects[i]);
                Projects[i] = Path.GetFullPath(Projects[i]);
                //ReadFile(Projects[i]);//for adding razorgenerator.mvc

                //process to remove razor mvc generated cs and add msbuild ref starts here                
                BlankRazorGeneratedLines(Projects[i]);//step 2 to revert .generated.cs changes
                ReplaceGeneratedLinesStartingwithNone(Projects[i]);//step 3 undo generated.cs back to cshtml
                BlankRazorGeneratorMvcStartLines(Projects[i]);                
                BlankRazorMvcReferenceandAddRazorBuildRef(Projects[i]);//step 4 remove razor mvc pkg ref and add razor msbuild ref

                //BlankRazorGeneratedNoneLines(Projects[i]);
            }
            AddRazorMsBuildtoPackagesConfig();
            DeleteAutoGeneratedFiles();// step 1 delete autogenerated files from filesystem
            DeleteRazorMvcStartFiles(); //delete rzor generator mvc start files from filesystem
            Console.WriteLine("Operation success!!!");
            Console.ReadLine();
        }

        private static void DeleteAutoGeneratedFiles()
       {
            string[] files = Directory.GetFiles(slnParentPath, "*.generated.cs", SearchOption.AllDirectories);

            // delete all the files.
            foreach (string file in files)
            {
                File.Delete(file);
            }

            Console.WriteLine("Deleted all .generated.cs files from filesystem");
        }

        private static void DeleteRazorMvcStartFiles()
        {
            string[] files = Directory.GetFiles(slnParentPath, "RazorGeneratorMvcStart.cs", SearchOption.AllDirectories);

            // delete all the files.
            foreach (string file in files)
            {
                File.Delete(file);
            }

            Console.WriteLine("Deleted all RazorGeneratorMvcStart.cs files from filesystem");
        }

        
        private static string GetSubString(string stringVal, string string1,string string2)
        {

            int pFrom = stringVal.IndexOf(string1) + string1.Length;
            int pTo = stringVal.LastIndexOf(string2);

            return stringVal.Substring(pFrom, pTo - pFrom);
        }

        private static void ReadFile(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            int lastIndexofSlash;
            int indexofCshtml;
            int fileStringLength;
            bool fileChanged;
            string concatLines=string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    // optionally modify line.
                    if (currline.Contains("Content") && currline.Contains("Include=")  && currline.Contains(".cshtml"))
                    {
                        cshtmlPath = GetSubString(currline, "\"", "\"");
                        
                        lastIndexofSlash= cshtmlPath.LastIndexOf(@"\");
                        indexofCshtml = cshtmlPath.IndexOf(@".");
                        fileStringLength = indexofCshtml - lastIndexofSlash;

                        newline = "\r\t<None Include = \"" + cshtmlPath + "\">\r\t\t<Generator>RazorGenerator</Generator>\r\t\t<LastGenOutput>" + cshtmlPath.Substring(lastIndexofSlash + 1, fileStringLength) + "generated.cs</LastGenOutput>\r\t</None>\r";

                        fileChanged = true;
                        concatLines += newline;
                        
                    }
                    else
                    {
                        concatLines += currline + "\r";
                    }
                }
               
            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);
                    
                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }


        }

        private static void ReplaceGeneratedLinesStartingwithNone(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged=false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        // optionally modify line.
                        if (currline.Contains("None") && currline.Contains("Include=") && currline.Contains(".cshtml"))
                        {
                            newline = currline + "</None>\r";
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</None>"))
                        {
                            lineChanged = false;
                            fileChanged = true;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Updated cshtml entries in project file to build action none - " + filePath);
        }

        private static void BlankRazorGeneratedLines(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        // optionally modify line.
                        if (currline.Contains("Compile") && currline.Contains("Include=") && currline.Contains(".generated.cs"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</Compile>"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed .generated.cs entries in project file - " + filePath);
        }

        private static void BlankRazorGeneratorMvcStartLines(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    
                        // optionally modify line.
                        if (currline.Contains("Compile") && currline.Contains("Include=") && currline.Contains("App_Start\\RazorGeneratorMvcStart.cs"))
                        {
                            newline += string.Empty;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            concatLines += currline + "\r";
                        }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed RazorGeneratorMvcStart.cs reference in project file " + filePath);
        }

        private static void BlankRazorMvcReferenceandAddRazorBuildRef(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;
            bool tracktarget = false;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        // optionally modify line.
                        if (currline.Contains("Reference") && currline.Contains("Include=") && currline.Contains("RazorGenerator.Mvc"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;
                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            if (!tracktarget)
                            {
                                if (currline.Contains("<Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">"))
                                {
                                    tracktarget = true;
                                }
                                concatLines += currline + "\r";
                            }
                            else
                            {
                                if (currline.Contains("</Target>"))
                                {
                                    tracktarget = false;
                                    newline = "\r\t<Error Condition=\"!Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets'))\" />\r\t</Target>\r\t<Import Project=\"..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets\" Condition=\"Exists('..\\..\\..\\packages\\RazorGenerator.MsBuild.2.5.0\\build\\RazorGenerator.MsBuild.targets')\" />\r";
                                }
                                else
                                {
                                    newline = currline + "\r";
                                }
                                concatLines += newline;
                            }

                        }
                    }
                    else
                    {
                        if (currline.Contains("</Reference>"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }

            Console.WriteLine("Removed RazorGenerator.Mvc Dll ref and added RazorGenerator.msbuild pkg ref in proj file " + filePath);
        }

        private static void AddRazorMsBuildtoPackagesConfig()
        {
            var SlnPath = @"C:\Projects\xyz\"; //substitute with the folder that is higher tin hierarchy to search all sub dirs under
            //var Content = File.ReadAllText(SlnPath);
            string[] configs = Directory.GetFiles(SlnPath, "packages.config", SearchOption.AllDirectories);
            for (int i = 0; i < configs.Length; ++i)
            {
                if (!Path.IsPathRooted(configs[i]))
                    configs[i] = Path.Combine(Path.GetDirectoryName(SlnPath),
                        configs[i]);
                configs[i] = Path.GetFullPath(configs[i]);
                RemoveRazorGeneratorMvcRefandAddRazorBuildRefinPackageJson(configs[i]);

            }
        }

        private static void RemoveRazorGeneratorMvcRefandAddRazorBuildRefinPackageJson(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            string concatLines = string.Empty;



            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    // optionally modify line.
                    if (currline.Contains("<package id=\"RazorGenerator.Mvc\""))
                    {
                        newline = "  <package id=\"RazorGenerator.MsBuild\" version=\"2.5.0\" targetFramework=\"net472\" developmentDependency=\"true\" />\r";
                        fileChanged = true;
                        concatLines += newline;
                    }
                    else
                    {
                        concatLines += currline + "\r";

                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }
            Console.WriteLine("Updating Packages.config " + filePath);
        }


        private static void BlankRazorGeneratedNoneLines(string filePath)
        {
            string cshtmlPath = string.Empty;
            string newline = string.Empty;
            bool fileChanged;
            bool lineChanged = false;
            string concatLines = string.Empty;

            using (var input = File.OpenText(filePath))
            using (var output = new StreamWriter("temp.csproj"))
            {
                string currline;
                fileChanged = false;
                while (null != (currline = input.ReadLine()))
                {
                    if (!lineChanged)
                    {
                        // optionally modify line.
                        if (currline.Contains("None") && currline.Contains("Include=") && currline.Contains(".generated.cs"))
                        {
                            newline += string.Empty;
                            lineChanged = true;
                            fileChanged = true;

                            concatLines += newline;
                        }
                        else
                        {
                            lineChanged = false;
                            concatLines += currline + "\r";
                        }
                    }
                    else
                    {
                        if (currline.Contains("</None>"))
                        {
                            lineChanged = false;
                        }
                        concatLines += string.Empty;
                    }

                }

            }
            if (fileChanged)
            {

                File.WriteAllText(@"temp1.csproj", concatLines);

                File.Replace("temp1.csproj", filePath, null);
                File.Delete("temp1.csproj");
            }


        }
    }
}
